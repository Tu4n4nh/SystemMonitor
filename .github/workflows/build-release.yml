name: SystemMonitor CI/CD v2

on:
  # Trigger on every push to main branch
  push:
    branches: [ main, develop ]
  
  # Trigger on pull requests
  pull_request:
    branches: [ main ]
  
  # Trigger on tags for releases
  push:
    tags:
      - 'v*'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''

env:
  BUILD_TYPE: Release
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

jobs:
  # Continuous Integration - Build on every commit
  build:
    name: Build SystemMonitor
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', 'build.bat') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Setup vcpkg
      run: |
        if (-not (Test-Path "${{ env.VCPKG_ROOT }}")) {
          git clone https://github.com/Microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
        }
        cd ${{ env.VCPKG_ROOT }}
        .\bootstrap-vcpkg.bat
        
        # Force integration and verify
        Write-Host "üîß Integrating vcpkg..."
        .\vcpkg integrate install
        
        # Verify vcpkg is working
        Write-Host "üîç Verifying vcpkg installation..."
        .\vcpkg version
        
        # Set integration environment variable
        $env:VCPKG_ROOT="${{ env.VCPKG_ROOT }}"
        Write-Host "Environment VCPKG_ROOT set to: $env:VCPKG_ROOT"

    - name: Install dependencies
      run: |
        cd ${{ env.VCPKG_ROOT }}
        
        # Debug vcpkg environment
        Write-Host "üîç Debugging vcpkg installation..."
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
        
        # Ensure we're using the correct triplet
        Write-Host "üì¶ Installing libcurl with SSL support..."
        .\vcpkg install curl[ssl]:x64-windows-static --recurse
        
        # Debug installation
        Write-Host "üìÇ Checking vcpkg directory structure..."
        Get-ChildItem "${{ env.VCPKG_ROOT }}" -ErrorAction SilentlyContinue | Format-Table Name, Attributes
        
        if (Test-Path "${{ env.VCPKG_ROOT }}\installed") {
          Write-Host "üìÇ Installed directory exists"
          Get-ChildItem "${{ env.VCPKG_ROOT }}\installed" -ErrorAction SilentlyContinue | Format-Table Name, Attributes
          
          if (Test-Path "${{ env.VCPKG_ROOT }}\installed\x64-windows-static") {
            Write-Host "üìÇ x64-windows-static directory exists"
            Get-ChildItem "${{ env.VCPKG_ROOT }}\installed\x64-windows-static" -ErrorAction SilentlyContinue | Format-Table Name, Attributes
            
            if (Test-Path "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\include") {
              Write-Host "üìÇ Include directory exists"
              Get-ChildItem "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\include" -ErrorAction SilentlyContinue | Format-Table Name, Attributes
            }
          }
        }
        
        # Verify installation with multiple path formats
        $curlHeaderPath1 = "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\include\curl\curl.h"
        $curlHeaderPath2 = "${{ env.VCPKG_ROOT }}/installed/x64-windows-static/include/curl/curl.h"
        $curlLibPath = "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\lib\libcurl.lib"
        
        Write-Host "üîç Testing header paths:"
        Write-Host "Path 1 (backslash): $curlHeaderPath1"
        Write-Host "Path 1 exists: $(Test-Path $curlHeaderPath1)"
        Write-Host "Path 2 (forward slash): $curlHeaderPath2"
        Write-Host "Path 2 exists: $(Test-Path $curlHeaderPath2)"
        
        if (Test-Path $curlHeaderPath1) {
          Write-Host "‚úÖ libcurl headers installed: $curlHeaderPath1"
        } elseif (Test-Path $curlHeaderPath2) {
          Write-Host "‚úÖ libcurl headers installed: $curlHeaderPath2"
        } else {
          Write-Host "‚ùå libcurl headers missing at both paths"
          Write-Host "üìÇ Available files in vcpkg:"
          Get-ChildItem "${{ env.VCPKG_ROOT }}" -Recurse -Filter "curl.h" -ErrorAction SilentlyContinue | Format-Table FullName
          exit 1
        }
        
        if (Test-Path $curlLibPath) {
          Write-Host "‚úÖ libcurl library installed: $curlLibPath"
        } else {
          Write-Host "‚ùå libcurl library missing: $curlLibPath"
          Write-Host "üìÇ Available .lib files:"
          Get-ChildItem "${{ env.VCPKG_ROOT }}" -Recurse -Filter "*.lib" -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*curl*" } | Format-Table FullName
          exit 1
        }
        
        Write-Host "üìÇ Installed packages:"
        .\vcpkg list
        
    - name: Build SystemMonitor
      run: |
        # Normalize paths for Windows batch file compatibility
        $vcpkgRoot = "${{ env.VCPKG_ROOT }}".Replace('/', '\')
        
        Write-Host "üîß Setting up build environment:"
        Write-Host "  Original VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
        Write-Host "  Normalized VCPKG_ROOT: $vcpkgRoot"
        
        # Set environment variables for build script
        $env:VCPKG_ROOT = $vcpkgRoot
        $env:VCPKG_TARGET = "x64-windows-static"
        $env:OUTPUT_DIR = "bin"
        
        # Find Visual Studio installation using vswhere (more reliable)
        $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (Test-Path $vsWhere) {
          $vsPath = & $vsWhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if ($vsPath) {
            $env:VS_BUILD_TOOLS_PATH = $vsPath
            Write-Host "‚úÖ Found Visual Studio at: $vsPath"
          }
        }
        
        # Fallback to manual search if vswhere fails
        if (-not $env:VS_BUILD_TOOLS_PATH) {
          $possiblePaths = @(
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise",
            "C:\Program Files\Microsoft Visual Studio\2022\Professional", 
            "C:\Program Files\Microsoft Visual Studio\2022\Community",
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools",
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path "$path\VC\Auxiliary\Build\vcvars64.bat") {
              $env:VS_BUILD_TOOLS_PATH = $path
              Write-Host "‚úÖ Found Visual Studio at: $path (fallback)"
              break
            }
          }
        }
        
        Write-Host "üî® Building SystemMonitor with:"
        Write-Host "  VS Path: $env:VS_BUILD_TOOLS_PATH"
        Write-Host "  vcpkg: $env:VCPKG_ROOT"
        Write-Host "  Target: $env:VCPKG_TARGET"
        
        # Final verification before build
        $curlHeaderPath = "$vcpkgRoot\installed\x64-windows-static\include\curl\curl.h"
        if (Test-Path $curlHeaderPath) {
          Write-Host "‚úÖ Final verification: libcurl headers found at $curlHeaderPath"
        } else {
          Write-Host "‚ùå Final verification: libcurl headers missing at $curlHeaderPath"
          Write-Host "üìÇ Directory listing:"
          if (Test-Path "$vcpkgRoot\installed\x64-windows-static\include") {
            Get-ChildItem "$vcpkgRoot\installed\x64-windows-static\include" | Format-Table Name
          }
          exit 1
        }
        
        # Use the original build script
        .\build.bat
        
        # Verify build succeeded
        if (-not (Test-Path "bin\SystemMonitor.exe")) {
          Write-Host "‚ùå Build failed - SystemMonitor.exe not found"
          exit 1
        }

    - name: Test executable
      run: |
        if (Test-Path "bin\SystemMonitor.exe") {
          Write-Host "‚úÖ SystemMonitor.exe built successfully"
          $size = (Get-Item "bin\SystemMonitor.exe").Length / 1MB
          Write-Host "üìä Executable size: $([math]::Round($size, 2)) MB"
          
          # Test executable runs (help command)
          try {
            $output = & .\bin\SystemMonitor.exe --help 2>&1
            Write-Host "‚úÖ Executable test passed"
          } catch {
            Write-Host "‚ö†Ô∏è Executable runs but help command failed (may be normal)"
          }
        } else {
          Write-Host "‚ùå SystemMonitor.exe not found"
          exit 1
        }

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: SystemMonitor-${{ github.sha }}
        path: |
          bin/SystemMonitor.exe
          config/SystemMonitor.cfg.template
          README.md
        retention-days: 30

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.sha }}
        path: |
          *.log
          *.err
        retention-days: 7

  # Release Job - Only runs on tags
  release:
    name: Create Release
    runs-on: windows-2022
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', 'build.bat') }}

    - name: Setup vcpkg
      run: |
        if (-not (Test-Path "${{ env.VCPKG_ROOT }}")) {
          git clone https://github.com/Microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
        }
        cd ${{ env.VCPKG_ROOT }}
        .\bootstrap-vcpkg.bat
        .\vcpkg integrate install

    - name: Install dependencies
      run: |
        cd ${{ env.VCPKG_ROOT }}
        
        # Install libcurl with SSL support for release
        Write-Host "üì¶ Installing libcurl with SSL support for release..."
        .\vcpkg install curl[ssl]:x64-windows-static --recurse
        
        # Verify installation
        if (Test-Path "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\include\curl\curl.h") {
          Write-Host "‚úÖ libcurl headers verified for release build"
        } else {
          Write-Host "‚ùå libcurl headers missing for release build"
          exit 1
        }
        
    - name: Build SystemMonitor for Release
      run: |
        # Normalize paths for Windows batch file compatibility  
        $vcpkgRoot = "${{ env.VCPKG_ROOT }}".Replace('/', '\')
        
        # Set environment variables for build script
        $env:VCPKG_ROOT = $vcpkgRoot
        $env:VCPKG_TARGET = "x64-windows-static"
        $env:OUTPUT_DIR = "bin"
        
        # Find Visual Studio installation using vswhere
        $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (Test-Path $vsWhere) {
          $vsPath = & $vsWhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if ($vsPath) {
            $env:VS_BUILD_TOOLS_PATH = $vsPath
            Write-Host "‚úÖ Found Visual Studio at: $vsPath"
          }
        }
        
        Write-Host "üî® Building SystemMonitor for Release"
        .\build.bat

    - name: Create Release Package
      run: |
        $version = $env:GITHUB_REF_NAME
        $releaseDir = "SystemMonitor-$version"
        
        # Create release directory structure
        New-Item -ItemType Directory -Path $releaseDir -Force
        New-Item -ItemType Directory -Path "$releaseDir\config" -Force
        New-Item -ItemType Directory -Path "$releaseDir\docs" -Force
        
        # Copy files
        Copy-Item "bin\SystemMonitor.exe" "$releaseDir\"
        Copy-Item "config\SystemMonitor.cfg.template" "$releaseDir\config\"
        Copy-Item "README.md" "$releaseDir\"
        
        # Copy documentation if exists
        if (Test-Path "docs") { 
          Copy-Item "docs\*" "$releaseDir\docs\" -Recurse -ErrorAction SilentlyContinue
        }
        
        # Create deployment guide
        @"
# SystemMonitor $version - Deployment Package

## üöÄ Quick Start
1. Extract all files to your preferred directory
2. Copy ``config\SystemMonitor.cfg.template`` to ``config\SystemMonitor.cfg``
3. Edit ``config\SystemMonitor.cfg`` with your email settings
4. Run: ``SystemMonitor.exe --display silence``

## ‚ú® Features
- **Real-time Monitoring**: CPU, RAM, and Disk usage tracking
- **TLS Email Alerts**: Secure Gmail SMTP notifications
- **Multiple Display Modes**: Line, top, compact, silence
- **Static Linking**: No external dependencies required
- **Enterprise Ready**: Professional monitoring solution

## üìã Requirements
- Windows 10/11 or Windows Server 2016+
- Visual C++ Redistributable 2022 (typically pre-installed)

## ‚öôÔ∏è Configuration
Edit ``config\SystemMonitor.cfg``:
- Set monitoring thresholds (CPU/RAM/Disk %)
- Configure Gmail SMTP with App Password
- Customize alert timing and cooldown periods

## üîó Support
- GitHub: https://github.com/dnguyenminh/SystemMonitor
- Documentation: See docs/ folder
- Issues: Report via GitHub Issues

## üè∑Ô∏è Version Information
- Version: $version
- Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
- Compiler: MSVC with static libcurl
- Dependencies: Statically linked (self-contained)
"@ | Out-File -FilePath "$releaseDir\DEPLOYMENT_README.md" -Encoding UTF8
        
        # Create ZIP archive
        Compress-Archive -Path "$releaseDir\*" -DestinationPath "SystemMonitor-$version.zip" -Force
        
        # Set environment variables for next steps
        echo "RELEASE_FILE=SystemMonitor-$version.zip" >> $env:GITHUB_ENV
        echo "RELEASE_DIR=$releaseDir" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Generate Release Notes
      run: |
        $version = $env:VERSION
        $releaseNotes = @"
## SystemMonitor $version

### üéØ What's New
- Enterprise-grade system monitoring with TLS email alerts
- Static linking for easy deployment (no dependencies)
- Multiple display modes for different use cases
- Configurable thresholds and smart alerting

### üì¶ Deployment
- **Self-contained**: No vcpkg or external libraries needed
- **Production ready**: Suitable for server monitoring
- **Easy setup**: Extract, configure, and run

### üîß Features
- **Real-time monitoring**: CPU, RAM, Disk usage
- **Email notifications**: TLS-encrypted Gmail SMTP
- **Silent operation**: Perfect for background monitoring
- **Professional logging**: Rotation and debug support

### üì• Installation
1. Download ``SystemMonitor-$version.zip``
2. Extract to your target directory
3. Configure ``config/SystemMonitor.cfg``
4. Run: ``SystemMonitor.exe --display silence``

### üèóÔ∏è Build Information
- **Compiled**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
- **Compiler**: Visual Studio 2022 (MSVC)
- **Dependencies**: libcurl with TLS (statically linked)
- **Platform**: Windows x64

Built automatically by GitHub Actions from commit $env:GITHUB_SHA
"@
        
        $releaseNotes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_ENV
        $releaseNotes >> $env:GITHUB_ENV
        echo "EOF" >> $env:GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.RELEASE_FILE }}
        name: SystemMonitor ${{ env.VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Artifact
      uses: actions/upload-artifact@v4
      with:
        name: SystemMonitor-Release-${{ env.VERSION }}
        path: ${{ env.RELEASE_FILE }}
        retention-days: 90
